#version 430 core

layout (r32f, binding = 0) readonly uniform image2D WATER_PING;
layout (rgba32f, binding = 1) readonly uniform image2D FLUX_PING;

layout (r32f, binding = 2) writeonly uniform image2D WATER_PONG;
layout (rg32f, binding = 3) writeonly uniform image2D VELOCITY_FIELD;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform float TIME;

/*
 * r: right
 * g: left
 * b: bottom
 * a: top
*/

/* The water height is updated with the new outflow flux field
by collecting the inflow flux f_in from neighbor cells, and
sending the outflow flux f_out away from the current cell. */
void main(void)
{
	ivec2 uv = ivec2(gl_GlobalInvocationID.xy);

	float l = 1.0;
	float A = l * l; // pipe area
	float g = 0.8f; // gravity

	vec4 flux = imageLoad(FLUX_PING, uv);

	// incoming flow is the outgoing flow from neighbor cells in opposite directions
	float top_in = imageLoad(FLUX_PING, ivec2(uv.x, uv.y + 1)).b;
	float bottom_in = imageLoad(FLUX_PING, ivec2(uv.x, uv.y - 1)).a;
	float right_in = imageLoad(FLUX_PING, ivec2(uv.x + 1, uv.y)).g;
	float left_in = imageLoad(FLUX_PING, ivec2(uv.x - 1, uv.y)).r;

	float inflow_flux = top_in + bottom_in + right_in + left_in;
	float outflow_flux = flux.r + flux.g + flux.b + flux.a;

	float volume_change = TIME * (inflow_flux - outflow_flux);

	// update water height
	float d1 = imageLoad(WATER_PING, uv).r;
	float d2 = d1 + (volume_change / (l * l));

	d2 = max(d2, 0.0);

	// update the velocity vector field
	// the velocity field is calculated from the outflow flux
	float W_x = 0.5f * (left_in - flux.g + flux.r - right_in);
	float W_y = 0.5f * (bottom_in - flux.b + flux.a - top_in);

	float da = 0.5f * (d1 + d2);

	if (d1 < 0.0001f || da < 0.0001f) {
		W_x = 0.f;
		W_y = 0.f;
	}

	imageStore(WATER_PONG, uv, vec4(d2));
	imageStore(VELOCITY_FIELD, uv, vec4(W_x, W_y, W_x, W_y));
}
